package io.quarkiverse.amazon.rds.deployment;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.net.URI;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;

import io.quarkus.credentials.CredentialsProvider;
import io.quarkus.credentials.runtime.CredentialsProviderFinder;
import io.quarkus.test.QuarkusUnitTest;

public class RdsCredentialProviderTest {

    @RegisterExtension
    static final QuarkusUnitTest config = new QuarkusUnitTest()
            .withApplicationRoot((jar) -> jar
                    .addAsResource("rds-credential-provider-config.properties", "application.properties"));

    @Test
    public void testQuarkus() {
        // The Quarkus provider is configured by devservices
        CredentialsProvider credentialsProvider = CredentialsProviderFinder.find(null);
        var credz = credentialsProvider.getCredentials("test-provider-quarkus");

        assertEquals("myiam", credz.get("user"));

        String password = credz.get("password");
        assertNotNull(password);

        // The password is generated by the RDS client, so we should not check the value
        // but to be sure the generated token is for the correct configuration, we can try to parse it
        URI uri = URI.create("password://" + password);
        assertEquals(15, uri.getPort());
        var queryParams = uri.getQuery().split("&");
        assertEquals("DBUser=myiam", queryParams[0]);
    }

    @Test
    public void testDefault() {
        CredentialsProvider credentialsProvider = CredentialsProviderFinder.find(null);

        // The default provider should throw an exception because it is not configured
        assertThrows(software.amazon.awssdk.core.exception.SdkClientException.class,
                () -> credentialsProvider.getCredentials("test-provider-default"));
    }
}
